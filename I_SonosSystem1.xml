<?xml version="1.0"?>
<!-- I_Sonos1.xml -->
<implementation>
	<functions>
		function sonosSystemStartup( dev )
			luup.log("Sonos System implementation startup")
			local f = io.open("/etc/cmh-ludl/Z_SonosSystem1.zzz","r")
			if f then
				f:close()
				luup.log("Sonos (I_SonosSystem1.xml): file /etc/cmh-ludl/Z_SonosSystem1.zzz exists, aborting startup!", 1)
				return false, "Zzz", "Sonos"
			end
			L_SonosSystem1 = require "L_SonosSystem1"
			-- Sanity check installation
			if ( L_SonosSystem1.PLUGIN_VERSION or "" ) == "" then
				luup.log( "Sonos: installation failure; the L_SonosSystem1 module has not been correctly updated to match the implementation file. Please re-install the entire plugin.", 1 )
				luup.set_failure( 1, dev )
				return false, "Invalid install", "Sonos"
			end
			-- Promote callbacks to global
			sonosTick = L_SonosSystem1.sonosTick
			sonosRequestHandler = L_SonosSystem1.handleRequest
			luup.register_handler("sonosRequestHandler", "SonosSystem")
			luup.register_handler("sonosRequestHandler", "Sonos")
			processProxySubscriptions = L_SonosSystem1.processProxySubscriptions
			renewSubscriptions = L_SonosSystem1.renewSubscriptions
			cancelProxySubscription = L_SonosSystem1.cancelProxySubscription
			-- Get going
			return L_SonosSystem1.startup( dev )
		end
	</functions>
	<startup>sonosSystemStartup</startup>
	<actionList>
		<!--

		ACTIONS IN SERVICE urn:micasaverde-com:serviceId:Sonos1

		-->
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>SetupTTS</name>
			<run>
				return L_SonosSystem1.actionSonosSetupTTS( lul_device, lul_settings )
			</run>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>ResetTTS</name>
			<run>
				return L_SonosSystem1.actionSonosResetTTS( lul_device, lul_settings )
			</run>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>PauseAll</name>
			<job>
				return L_SonosSystem1.actionSonosPauseAll( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>SavePlaybackContext</name>
			<job>
				return L_SonosSystem1.actionSonosSavePlaybackContext( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>RestorePlaybackContext</name>
			<job>
				return L_SonosSystem1.actionSonosRestorePlaybackContext( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>StartSonosDiscovery</name>
			<job>
				return L_SonosSystem1.actionSonosStartDiscovery( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>SetDebugLogs</name>
			<run>
				return L_SonosSystem1.actionSonosSetDebugLogs( lul_device, lul_settings )
			</run>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>InstallDiscoveryPatch</name>
			<job>
				return L_SonosSystem1.actionSonosInstallDiscoveryPatch( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>UninstallDiscoveryPatch</name>
			<job>
				return L_SonosSystem1.actionSonosUninstallDiscoveryPatch( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:toggledbits-com:serviceId:SonosSystem1</serviceId>
			<name>IncludeIP</name>
			<job>
				return L_SonosSystem1.actionSonosSystemIncludeIP( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:micasaverde-com:serviceId:Sonos1

		-->
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>PlayURI</name>
			<job>
				return L_SonosSystem1.actionSonosPlayURI( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>EnqueueURI</name>
			<job>
				return L_SonosSystem1.actionSonosEnqueueURI( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>SetURIToPlay</name>
			<job>
				return L_SonosSystem1.actionSonosSetURIToPlay( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>Say</name>
			<job>
				return L_SonosSystem1.actionSonosSay( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>Alert</name>
			<job>
				return L_SonosSystem1.actionSonosAlert( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>PauseAll</name>
			<job>
				return L_SonosSystem1.actionSonosPauseAll( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>JoinGroup</name>
			<job>
				return L_SonosSystem1.actionSonosJoinGroup( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>LeaveGroup</name>
			<job>
				return L_SonosSystem1.actionSonoLeaveGroup( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>UpdateGroupMembers</name>
			<job>
				return L_SonosSystem1.actionSonosUpdateGroupMembers( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>SelectSonosDevice</name>
			<job>
				return L_SonosSystem1.actionSonosSelectDevice( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>SearchAndSelectSonosDevice</name>
			<job>
				return L_SonosSystem1.actionSonosSearchAndSelect( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>SetCheckStateRate</name>
			<job>
				return L_SonosSystem1.actionSonosSetCheckStateRate( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>SetReadQueueContent</name>
			<job>
				return L_SonosSystem1.actionSonosSetReadQueueContent( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>NotifyRenderingChange</name>
			<job>
				return L_SonosSystem1.actionSonosNotifyRenderingChange( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>NotifyAVTransportChange</name>
			<job>
				return L_SonosSystem1.actionSonosNotifyAVTransportChange( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>NotifyMusicServicesChange</name>
			<job>
				return L_SonosSystem1.actionSonosNotifyMusicServicesChange( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>NotifyZoneGroupTopologyChange</name>
			<job>
				return L_SonosSystem1.actionSonosNotifyZoneGroupTopologyChange( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Sonos1</serviceId>
			<name>NotifyContentDirectoryChange</name>
			<job>
				return L_SonosSystem1.actionSonosNotifyContentDirectoryChange( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:micasaverde-com:serviceId:Volume1

		-->
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Volume1</serviceId>
			<name>Mute</name>
			<job>
				return L_SonosSystem1.actionVolumeMute( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Volume1</serviceId>
			<name>Up</name>
			<job>
				return L_SonosSystem1.actionVolumeUp( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:Volume1</serviceId>
			<name>Down</name>
			<job>
				return L_SonosSystem1.actionVolumeDown( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:micasaverde-com:serviceId:MediaNavigation1

		-->
		<action>
			<serviceId>urn:micasaverde-com:serviceId:MediaNavigation1</serviceId>
			<name>Play</name>
			<job>
				-- Reuse AVTransport service function; works the same apparently
				return L_SonosSystem1.actionAVTransportPlayMedia( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:MediaNavigation1</serviceId>
			<name>Pause</name>
			<job>
				-- Reuse AVTransport service function; works the same apparently
				return L_SonosSystem1.actionAVTransportPause( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:MediaNavigation1</serviceId>
			<name>Stop</name>
			<job>
				-- Reuse AVTransport service function; works the same apparently
				return L_SonosSystem1.actionAVTransportStop( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:MediaNavigation1</serviceId>
			<name>SkipDown</name>
			<job>
				return L_SonosSystem1.actionMediaNavigationSkipDown( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:MediaNavigation1</serviceId>
			<name>SkipUp</name>
			<job>
				return L_SonosSystem1.actionMediaNavigationSkipUp( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:upnp-org:serviceId:AVTransport

		-->
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>Play</name>
			<job>
				return L_SonosSystem1.actionAVTransportPlayMedia( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>Seek</name>
			<job>
				return L_SonosSystem1.actionAVTransportSeek( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>Pause</name>
			<job>
				return L_SonosSystem1.actionAVTransportPause( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>Stop</name>
			<job>
				return L_SonosSystem1.actionAVTransportStop( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>Next</name>
			<job>
				return L_SonosSystem1.actionAVTransportNext( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>NextProgrammedRadioTracks</name>
			<job>
				return L_SonosSystem1.actionAVTransportNextProgrammedRadioTracks( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>NextSection</name>
			<job>
				return L_SonosSystem1.actionAVTransportNextSection( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>Previous</name>
			<job>
				return L_SonosSystem1.actionAVTransportPrevious( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>PreviousSection</name>
			<job>
				return L_SonosSystem1.actionAVTransportPreviousSection( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>GetPositionInfo</name>
			<job>
				return L_SonosSystem1.actionAVTransportGetPositionInfo( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>SetPlayMode</name>
			<job>
				return L_SonosSystem1.actionAVTransportSetPlayMode( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>SetAVTransportURI</name>
			<job>
				return L_SonosSystem1.actionAVTransportSetURI( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>SetNextAVTransportURI</name>
			<job>
				return L_SonosSystem1.actionAVTransportSetNextURI( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>AddMultipleURIsToQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportAddMultipleURIs( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>AddURIToQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportAddURI( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>CreateSavedQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportCreateSavedQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>AddURIToSavedQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportAddURItoSaved( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>ReorderTracksInQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportReorderQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>ReorderTracksInSavedQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportReorderSaved( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>RemoveTrackFromQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportRemoveTrackFromQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>RemoveTrackRangeFromQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportRemoveTrackRangeFromQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>RemoveAllTracksFromQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportRemoveAllTracksFromQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>SaveQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportSaveQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>BackupQueue</name>
			<job>
				return L_SonosSystem1.actionAVTransportBackupQueue( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>ChangeTransportSettings</name>
			<job>
				return L_SonosSystem1.actionAVTransportChangeTransportSettings( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>ConfigureSleepTimer</name>
			<job>
				return L_SonosSystem1.actionAVTransportConfigureSleepTimer( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>RunAlarm</name>
			<job>
				return L_SonosSystem1.actionAVTransportRunAlarm( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>StartAutoplay</name>
			<job>
				return L_SonosSystem1.actionAVTransportStartAutoplay( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>SnoozeAlarm</name>
			<job>
				return L_SonosSystem1.actionAVTransportSnoozeAlarm( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>SetCrossfadeMode</name>
			<job>
				return L_SonosSystem1.actionAVTransportSetCrossfadeMode( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>NotifyDeletedURI</name>
			<job>
				return L_SonosSystem1.actionAVTransportNotifyDeletedURI( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>BecomeCoordinatorOfStandaloneGroup</name>
			<job>
				return L_SonosSystem1.actionAVTransportBecomeCoordinatorSG( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>BecomeGroupCoordinator</name>
			<job>
				return L_SonosSystem1.actionAVTransportBecomeGroupCoordinator( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>BecomeGroupCoordinatorAndSource</name>
			<job>
				return L_SonosSystem1.actionAVTransportBecomeGCAndSource( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>ChangeCoordinator</name>
			<job>
				return L_SonosSystem1.actionAVTransportChangeCoordinator( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:AVTransport</serviceId>
			<name>DelegateGroupCoordinationTo</name>
			<job>
				return L_SonosSystem1.actionAVTransportDelegateGCTo( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:upnp-org:serviceId:RenderingControl

		-->
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetMute</name>
			<job>
				return L_SonosSystem1.actionRCSetMute( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>ResetBasicEQ</name>
			<job>
				return L_SonosSystem1.actionRCResetBasicEQ( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>ResetExtEQ</name>
			<job>
				return L_SonosSystem1.actionRCResetExtEQ( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetVolume</name>
			<job>
				return L_SonosSystem1.actionRCSetVolume( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetRelativeVolume</name>
			<job>
				return L_SonosSystem1.actionRCSetRelativeVolume( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetVolumeDB</name>
			<job>
				return L_SonosSystem1.actionRCSetVolumeDB( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetBass</name>
			<job>
				return L_SonosSystem1.actionRCSetBass( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetTreble</name>
			<job>
				return L_SonosSystem1.actionRCSetTreble( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetEQ</name>
			<job>
				return L_SonosSystem1.actionRCSetEQ( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetLoudness</name>
			<job>
				return L_SonosSystem1.actionRCSetLoudness( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetOutputFixed</name>
			<job>
				return L_SonosSystem1.actionRCSetOutputFixed( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>RampToVolume</name>
			<job>
				return L_SonosSystem1.actionRCRampToVolume( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>RestoreVolumePriorToRamp</name>
			<job>
				return L_SonosSystem1.actionRCRestoreVolumePriorToRamp( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RenderingControl</serviceId>
			<name>SetChannelMap</name>
			<job>
				return L_SonosSystem1.actionRCSetChannelMap( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:upnp-org:serviceId:GroupRenderingControl

		-->
		<action>
			<serviceId>urn:upnp-org:serviceId:GroupRenderingControl</serviceId>
			<name>SetGroupMute</name>
			<job>
				return L_SonosSystem1.actionGRCSetGroupMute( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:GroupRenderingControl</serviceId>
			<name>SetGroupVolume</name>
			<job>
				return L_SonosSystem1.actionGRCSetGroupVolume( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:GroupRenderingControl</serviceId>
			<name>SetRelativeGroupVolume</name>
			<job>
				return L_SonosSystem1.actionGRCSetRelativeGroupVolume( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:GroupRenderingControl</serviceId>
			<name>SnapshotGroupVolume</name>
			<job>
				return L_SonosSystem1.actionGRCSnapshotGroupVolume( lul_device, lul_settings )
			</job>
		</action>
		<!--

		ACTIONS IN SERVICE urn:micasaverde-com:serviceId:HaDevice1

		-->
		<action>
			<serviceId>urn:micasaverde-com:serviceId:HaDevice1</serviceId>
			<name>Poll</name>
			<job>
				return L_SonosSystem1.actionPoll( lul_device, lul_settings )
			</job>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:HaDevice1</serviceId>
			<name>ToggleState</name>
			<job>
				-- ??? TODO: This needs to be implemented to make the Icon cause a toggle action
			</job>
		</action>
	</actionList>
</implementation>